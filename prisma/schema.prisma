generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  firstName          String
  lastName           String
  country            String?
  profilePicture     Bytes?
  registeredAt       DateTime            @default(now())
  projects           ProjectsToMembers[]
  domains            Domains[]
  skills             Json
  contributions      ProjectItems[]
  actions            Actions[]
  isEmailValidated   Boolean             @default(false)
  validateEmailToken String?
  resetPasswordToken String?
}

model Projects {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String?             @db.Text
  coverImage  Bytes?
  public      Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  members     ProjectsToMembers[]
  domains     Domains[]
  items       ProjectItems[]
  actions     Actions[]
}

model Domains {
  id       Int        @id @default(autoincrement())
  name     Domain     @unique
  users    Users[]
  projects Projects[]
}

model ProjectItems {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?  @db.Text
  link           String?
  associatedFile Bytes?
  validated      Boolean  @default(false)
  createdAt      DateTime @default(now())
  author         Users    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId       Int
  project        Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId      Int
}

model ProjectsToMembers {
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  role      Role     @default(READER)
  addedAt   DateTime @default(now())

  @@id([projectId, userId])
}

model Actions {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  author    Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
}

enum Domain {
  UXUI_DESIGN
  DEVELOPMENT
  GRAPHIC_DESIGN
  WEBMARKETING
  CYBERSECURITY
  DATA
  AUDIOVISUAL
}

enum Role {
  OWNER
  EDITOR
  READER
}
