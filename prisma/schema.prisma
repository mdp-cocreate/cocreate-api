generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Domain {
  id     Int        @id @default(autoincrement())
  name   DomainName @unique
  skills Skill[]
}

model Skill {
  id       Int       @id @default(autoincrement())
  name     SkillName @unique
  domain   Domain    @relation(fields: [domainId], references: [id])
  domainId Int
  users    User[]
  projects Project[]
}

model User {
  id                 Int               @id @default(autoincrement())
  slug               String            @unique
  email              String            @unique
  password           String
  firstName          String
  lastName           String
  profilePicture     Bytes?
  registeredAt       DateTime?         @default(now())
  skills             Skill[]
  projects           ProjectToMember[]
  contributions      ProjectItem[]
  actions            Action[]
  joinRequests       JoinRequest[]
  isEmailValidated   Boolean?          @default(false)
  validateEmailToken String?
  resetPasswordToken String?
}

model Project {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  slug             String            @unique
  shortDescription String
  description      String?           @db.Text
  coverImage       Bytes?
  public           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  members          ProjectToMember[]
  skills           Skill[]
  items            ProjectItem[]
  actions          Action[]
  joinRequests     JoinRequest[]
}

model ProjectItem {
  id               Int      @id @default(autoincrement())
  name             String
  shortDescription String
  link             String?
  associatedFile   Bytes?
  createdAt        DateTime @default(now())
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId         Int
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId        Int
}

model ProjectToMember {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  role      Role     @default(READER)
  addedAt   DateTime @default(now())

  @@id([projectId, userId])
}

model Action {
  id        Int      @id @default(autoincrement())
  name      String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model JoinRequest {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@id([projectId, userId])
}

enum DomainName {
  UXUI_DESIGN
  DEVELOPMENT
  GRAPHIC_DESIGN
  WEBMARKETING
  CYBERSECURITY
  DATA
  AUDIOVISUAL
}

enum SkillName {
  // UXUI_DESIGN
  USER_RESEARCH
  WIREFRAMING
  INTERACTIVE_PROTOTYPING
  USER_CENTERED_DESIGN
  INTERACTION_DESIGN

  // DEVELOPMENT
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  FRONTEND_DEVELOPMENT
  BACKEND_DEVELOPMENT
  DATABASE_MANAGEMENT

  // GRAPHIC_DESIGN
  TYPOGRAPHY
  BRAND_IDENTITY_DESIGN
  ILLUSTRATION
  LAYOUT_DESIGN
  COLOR_THEORY

  // WEBMARKETING
  DIGITAL_STRATEGY
  SEO_OPTIMIZATION
  SOCIAL_MEDIA_MARKETING
  CONTENT_MARKETING
  ANALYTICS_TRACKING

  // CYBERSECURITY
  NETWORK_SECURITY
  THREAT_ANALYSIS
  INCIDENT_RESPONSE
  VULNERABILITY_ASSESSMENT
  CRYPTOGRAPHY

  // DATA
  DATA_ANALYSIS
  DATA_VISUALIZATION
  MACHINE_LEARNING
  DATA_ENGINEERING
  STATISTICAL_MODELING

  // AUDIOVISUAL
  VIDEO_EDITING
  MOTION_GRAPHICS
  SOUND_DESIGN
  STORYBOARDING
  CINEMATOGRAPHY
}

enum Role {
  OWNER
  EDITOR
  READER
}
